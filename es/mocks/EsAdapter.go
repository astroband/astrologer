// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import bytes "bytes"

import mock "github.com/stretchr/testify/mock"

// EsAdapter is an autogenerated mock type for the EsAdapter type
type EsAdapter struct {
	mock.Mock
}

// BulkInsert provides a mock function with given fields: payload
func (_m *EsAdapter) BulkInsert(payload *bytes.Buffer) bool {
	ret := _m.Called(payload)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*bytes.Buffer) bool); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CreateIndex provides a mock function with given fields: name, body
func (_m *EsAdapter) CreateIndex(name string, body string) {
	_m.Called(name, body)
}

// DeleteIndex provides a mock function with given fields: name
func (_m *EsAdapter) DeleteIndex(name string) {
	_m.Called(name)
}

// GetLedgerSeqsInRange provides a mock function with given fields: min, max
func (_m *EsAdapter) GetLedgerSeqsInRange(min int, max int) []int {
	ret := _m.Called(min, max)

	var r0 []int
	if rf, ok := ret.Get(0).(func(int, int) []int); ok {
		r0 = rf(min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

// IndexExists provides a mock function with given fields: name
func (_m *EsAdapter) IndexExists(name string) bool {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LedgerCountInRange provides a mock function with given fields: min, max
func (_m *EsAdapter) LedgerCountInRange(min int, max int) int {
	ret := _m.Called(min, max)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(min, max)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// LedgerSeqRangeQuery provides a mock function with given fields: ranges
func (_m *EsAdapter) LedgerSeqRangeQuery(ranges []map[string]interface{}) map[string]interface{} {
	ret := _m.Called(ranges)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func([]map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(ranges)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MinMaxSeq provides a mock function with given fields:
func (_m *EsAdapter) MinMaxSeq() (int, int) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}
